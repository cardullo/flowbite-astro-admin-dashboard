<script>
    window.onload = function() {
        const progressBar = document.querySelector('.progress-bar');
        const progressIcon = document.querySelector('.progress-icon');
        const progressContainer = document.querySelector('.progress-container');
        const initialBalanceElement = document.querySelector('#initial_balance');
        const apyElement = document.querySelector('#apy');
        const futureValueElement = document.querySelector('#future_value');
        const ufoxElement = document.querySelector('#ufox');
        const interestsEarnedElement = document.querySelector('#interests_earned');
        const cApyElement = document.querySelector('#c_apy');

        progressContainer.addEventListener('mousedown', startDragging);
        progressContainer.addEventListener('mouseup', stopDragging);
        progressContainer.addEventListener('mousemove', drag);

        let dragging = false;

        function startDragging(e) {
            dragging = true;
            document.body.classList.add('no-select');
            drag(e);
        }

        function stopDragging() {
            dragging = false;
            document.body.classList.remove('no-select');
        }

		function drag(e) {
			if (!dragging) return;
			const rect = progressContainer.getBoundingClientRect();
			let progress = (e.clientX - rect.left) / rect.width * 100;
			if (progress < 0) progress = 0;
			if (progress > 100) progress = 100;
			progressBar.style.width = `${progress}%`;
			progressIcon.style.left = `calc(${progress}% - 8px)`; // subtract 4px from the left position

			// Calculate the initial balance based on the progress
			let initialBalance = 1000 + progress * 990; // 1000 to 100000
			initialBalance = Math.round(initialBalance / 1000) * 1000; // Round to nearest 1000
			const initialApy = 42 / 100; // Initial APY in decimal form (48%)

			// Monthly compounding
			const n = 12; // Number of times interest is compounded per year
			const months = 12; // Number of months
			let balance = initialBalance;

			// Calculate the future value after each month
			for (let month = 1; month <= months; month++) {
				const monthlyInterest = balance * initialApy / n;
				balance += monthlyInterest;
			}

			// The final balance after 12 months
			const finalBalance = Math.round(balance * 100) / 100;

			// Calculate the interest earned
			const interestEarned = finalBalance - initialBalance;

			// Calculate the compounded APY
			const years = 1; // Number of years
			const cApy = Math.pow(finalBalance / initialBalance, 1 / years) - 1;


			// UFOX Token
			// Each 100 $ = 10 ufox tokens
			const ufoxToken = finalBalance / 10;

			// Update the values in the HTML
			initialBalanceElement.textContent = `$${initialBalance.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
			apyElement.textContent = `${(initialApy * 100).toFixed(2)}%`;
			futureValueElement.textContent = `$${finalBalance.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
			ufoxElement.textContent = `${ufoxToken.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})} UFOX`;
			interestsEarnedElement.textContent = `$${interestEarned.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
			cApyElement.textContent = `${(cApy * 100).toFixed(2)}%`;
		}
	}
</script>


<div>
	<!-- <h3 class="text-base font-normal text-gray-500 dark:text-gray-400 mb-4">
		Interests Earned After 1 Year</h3> -->
	<p class="text-2xl font-bold leading-none text-gray-900 sm:text-3xl dark:text-white  mb-8" id="interests_earned">$511.07</p>

	<div class="flex justify-between mt-4">
		<span class="inline-flex items-center text-base font-semibold text-gray-900 dark:text-white mb-4">Initial Balance</span>
		<span id="initial_balance" class="font-bold">$1,000.00</span>
	</div>

	<div >
		

		
		<div class="relative w-full h-4 mb-4 bg-gray-200 rounded-full dark:bg-gray-700 progress-container">
			<div class="absolute h-4 bg-blue-600 rounded-full dark:bg-blue-500 progress-bar" style="width: 0%"></div>
			<div class="absolute top-1/2 -right-2 w-8 h-8 bg-blue-600 rounded-full dark:bg-blue-500 progress-icon cursor-ew-resize transform -translate-y-1/2" style="left: 0%"></div>
		</div>



	</div>
	
	<div class="flex justify-between mb-2 ml-2 text-gray-500">
		<span>Future value</span>
		<span class="flex items-center justify-end flex-1 text-sm text-green-500 dark:text-green-400 font-bold" id="future_value">$1,601.03</span>
	</div>

	<div class="flex justify-between mb-2 ml-2 text-gray-500">
		<span>Effective annual rate (APY)</span>
		<span class="flex items-center justify-end flex-1 text-sm text-green-500 dark:text-green-400" id="apy">42.00%</span>
	</div>

	<div class="flex justify-between mb-2 ml-2 text-gray-500">
		<span>Compounded (APY)</span>
		<span class="flex items-center justify-end flex-1 text-sm text-green-500 dark:text-green-400" id="c_apy">51.11%</span>
</div>

<div class="flex justify-between mb-2 ml-2 text-gray-500">
		<span>Maximum Downside</span>
		<span class="flex items-center justify-end flex-1 text-sm text-green-500 dark:text-green-400" id="maximum_downside">~20%</span>
	</div>

	<div class="flex justify-between mb-2 ml-2 text-gray-500">
		<span>UFOX Tokens Earned</span>
		<span class="flex items-center justify-end flex-1 text-sm text-green-500 dark:text-green-400 font-bold" id="ufox">160.10 UFOX</span>
</div>

<p class="text-sm mt-4 p-4 font-normal text-gray-500 dark:text-gray-400" id="rule">
		Assuming there are no withdrawals within a year and considering the compounded interest on your investment, the pool in question is the Royal Foxes. It provides an average APY ranging from 35% to 55%. The risk level is categorized as A, indicating relatively limited risks, and the maximum downside is capped at -20%. This means that even in a worst-case scenario, the maximum losses cannot exceed 20%.
	</p>
</div>
